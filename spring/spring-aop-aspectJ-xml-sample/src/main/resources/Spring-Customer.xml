<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
  http://www.springframework.org/schema/aop
  http://www.springframework.org/schema/aop/spring-aop-4.0.xsd ">

  <aop:aspectj-autoproxy/>

  <bean id="customerBo" class="com.mkyong.customer.bo.impl.CustomerBoImpl"/>

  <!-- Aspect -->
  <bean id="logAspect" class="com.mkyong.aspect.LoggingAspect"/>

  <aop:config>

    <aop:aspect id="aspectLoggging" ref="logAspect">

      <!-- @Before -->
      <aop:pointcut id="pointCutBefore"
        expression="execution(* com.mkyong.customer.bo.CustomerBo.addCustomer(..))"/>

      <aop:before method="logBefore" pointcut-ref="pointCutBefore"/>

      <!-- @After -->
      <aop:pointcut id="pointCutAfter"
        expression="execution(* com.mkyong.customer.bo.CustomerBo.addCustomer(..))"/>

      <aop:after method="logAfter" pointcut-ref="pointCutAfter"/>

      <!-- @AfterReturning -->
      <aop:pointcut id="pointCutAfterReturning"
        expression="execution(* com.mkyong.customer.bo.CustomerBo.addCustomerReturnValue(..))"/>

      <aop:after-returning method="logAfterReturning" returning="result"
        pointcut-ref="pointCutAfterReturning"/>


      <!-- @AfterThrowing -->
      <aop:pointcut id="pointCutAfterThrowing"
        expression="execution(* com.mkyong.customer.bo.CustomerBo.addCustomerThrowException(..))"/>

      <aop:after-throwing method="logAfterThrowing" throwing="error"
        pointcut-ref="pointCutAfterThrowing"/>


      <!-- @Around -->
      <aop:pointcut id="pointCutAround"
        expression="execution(* com.mkyong.customer.bo.CustomerBo.addCustomerAround(..))"/>

      <aop:around method="logAround" pointcut-ref="pointCutAround"/>

    </aop:aspect>

  </aop:config>


</beans>