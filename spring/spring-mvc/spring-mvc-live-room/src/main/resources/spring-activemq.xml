<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:amq="http://activemq.apache.org/schema/core"
  xmlns:jms="http://www.springframework.org/schema/jms"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/jms
        http://www.springframework.org/schema/jms/spring-jms-4.0.xsd
        http://activemq.apache.org/schema/core
        http://activemq.apache.org/schema/core/activemq-core-5.8.0.xsd">

  <!-- 加载activemq的属性配置文件 -->
  <context:property-placeholder location="classpath:config/activemq.properties"/>

  <!-- ActiveMQ 连接工厂 -->
  <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->
  <!-- 如果连接网络：tcp://ip:61616；未连接网络：tcp://localhost:61616 以及用户名，密码-->
  <amq:connectionFactory id="amqConnectionFactory"
    brokerURL="tcp://localhost:61616" userName="admin" password="admin"/>

  <!-- Spring Caching连接工厂 -->
  <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory
  org.springframework.jms.connection.CachingConnectionFactory
  org.apache.activemq.pool.PooledConnectionFactory
  -->
  <bean id="jmsConnectionFactory" class="org.springframework.jms.connection.CachingConnectionFactory">
    <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
    <property name="targetConnectionFactory" ref="amqConnectionFactory"></property>
    <!-- 同上，同理 -->
    <!-- <constructor-arg ref="amqConnectionFactory" /> -->
    <!-- Session缓存数量 -->
    <property name="sessionCacheSize" value="100"/>
    <!-- 接收者ID，用于Topic订阅者的永久订阅 clientId 作为客户端的标识，连接同一服务的客户端不能拥有相同的 -->
    <!--<property name="clientId" value="client-B" />-->
  </bean>

  <!-- Spring JmsTemplate 的消息生产者 start-->
  <!-- 定义JmsTemplate的Queue类型 -->
  <bean id="jmsQueueTemplate" class="org.springframework.jms.core.JmsTemplate">
    <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
    <constructor-arg ref="jmsConnectionFactory"/>
    <!-- 非pub/sub模型（发布/订阅），即队列模式 -->
    <property name="pubSubDomain" value="false"/>
    <!-- 订阅消息持久化 -->
    <property name="deliveryPersistent" value="true"/>
    <!-- 配置持久化，同上 deliveryPersistent
    <property name="deliveryMode" value="2" />
    -->
  </bean>

  <!-- 定义JmsTemplate的Topic类型 -->
  <bean id="jmsTopicTemplate" class="org.springframework.jms.core.JmsTemplate">
    <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
    <constructor-arg ref="jmsConnectionFactory"/>
    <!-- pub/sub模型（发布/订阅） -->
    <property name="pubSubDomain" value="true"/>
    <!-- 订阅消息持久化 -->
    <property name="deliveryPersistent" value="true"/>
    <!-- 配置持久化，同上 deliveryPersistent
    <property name="deliveryMode" value="2" />
    -->
  </bean>
  <!--Spring JmsTemplate 的消息生产者 end-->

  <!-- 消息消费者 start-->
  <!-- 定义Queue监听器 -->
  <jms:listener-container destination-type="queue" container-type="default" connection-factory="jmsConnectionFactory" acknowledge="auto">
    <jms:listener destination="yunsle.queue" ref="queueReceiver1"/>
    <jms:listener destination="yunsle.queue" ref="queueReceiver2"/>
    <jms:listener destination="yunsle.filter" ref="wordFilterQueueReceiver"/>
  </jms:listener-container>

  <!-- 定义Topic监听器 -->
  <jms:listener-container destination-type="topic" container-type="default" connection-factory="jmsConnectionFactory" acknowledge="auto">
    <jms:listener destination="yunsle.topic" ref="topicReceiver1"/>
  </jms:listener-container>
  <!-- 消息消费者 end -->

</beans>