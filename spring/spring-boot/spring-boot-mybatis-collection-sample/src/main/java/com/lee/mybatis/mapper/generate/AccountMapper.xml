<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lee.mybatis.dao.AccountMapper">
  <resultMap id="BaseResultMap" type="com.lee.mybatis.model.Account">
    <id column="account_id" jdbcType="INTEGER" property="id" />
    <result column="account_account_name" jdbcType="VARCHAR" property="accountName" />
    <result column="account_account_num" jdbcType="VARCHAR" property="accountNum" />
    <result column="account_account_type" jdbcType="TINYINT" property="accountType" />
    <result column="account_account_purpose" jdbcType="VARCHAR" property="accountPurpose" />
    <result column="account_deposit_bank" jdbcType="VARCHAR" property="depositBank" />
    <result column="account_account_state" jdbcType="TINYINT" property="accountState" />
    <result column="account_create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="account_update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="account_deleted" jdbcType="TINYINT" property="deleted" />
    <result column="account_customer_id" jdbcType="INTEGER" property="customerId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    account.id as account_id, account.account_name as account_account_name, account.account_num as account_account_num, 
    account.account_type as account_account_type, account.account_purpose as account_account_purpose, 
    account.deposit_bank as account_deposit_bank, account.account_state as account_account_state, 
    account.create_date as account_create_date, account.update_date as account_update_date, 
    account.deleted as account_deleted, account.customer_id as account_customer_id
  </sql>
  <select id="selectByExample" parameterType="com.lee.mybatis.model.AccountExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account account
    where account.id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from account
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lee.mybatis.model.AccountExample">
    delete from account account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lee.mybatis.model.Account">
    insert into account (id, account_name, account_num, 
      account_type, account_purpose, deposit_bank, 
      account_state, create_date, update_date, 
      deleted, customer_id)
    values (#{id,jdbcType=INTEGER}, #{accountName,jdbcType=VARCHAR}, #{accountNum,jdbcType=VARCHAR}, 
      #{accountType,jdbcType=TINYINT}, #{accountPurpose,jdbcType=VARCHAR}, #{depositBank,jdbcType=VARCHAR}, 
      #{accountState,jdbcType=TINYINT}, #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}, 
      #{deleted,jdbcType=TINYINT}, #{customerId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.lee.mybatis.model.Account">
    insert into account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="accountName != null">
        account_name,
      </if>
      <if test="accountNum != null">
        account_num,
      </if>
      <if test="accountType != null">
        account_type,
      </if>
      <if test="accountPurpose != null">
        account_purpose,
      </if>
      <if test="depositBank != null">
        deposit_bank,
      </if>
      <if test="accountState != null">
        account_state,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="updateDate != null">
        update_date,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
      <if test="customerId != null">
        customer_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="accountName != null">
        #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="accountNum != null">
        #{accountNum,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null">
        #{accountType,jdbcType=TINYINT},
      </if>
      <if test="accountPurpose != null">
        #{accountPurpose,jdbcType=VARCHAR},
      </if>
      <if test="depositBank != null">
        #{depositBank,jdbcType=VARCHAR},
      </if>
      <if test="accountState != null">
        #{accountState,jdbcType=TINYINT},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=TINYINT},
      </if>
      <if test="customerId != null">
        #{customerId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lee.mybatis.model.AccountExample" resultType="java.lang.Long">
    select count(*) from account account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update account account
    <set>
      <if test="record.id != null">
        account.id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.accountName != null">
        account.account_name = #{record.accountName,jdbcType=VARCHAR},
      </if>
      <if test="record.accountNum != null">
        account.account_num = #{record.accountNum,jdbcType=VARCHAR},
      </if>
      <if test="record.accountType != null">
        account.account_type = #{record.accountType,jdbcType=TINYINT},
      </if>
      <if test="record.accountPurpose != null">
        account.account_purpose = #{record.accountPurpose,jdbcType=VARCHAR},
      </if>
      <if test="record.depositBank != null">
        account.deposit_bank = #{record.depositBank,jdbcType=VARCHAR},
      </if>
      <if test="record.accountState != null">
        account.account_state = #{record.accountState,jdbcType=TINYINT},
      </if>
      <if test="record.createDate != null">
        account.create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateDate != null">
        account.update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleted != null">
        account.deleted = #{record.deleted,jdbcType=TINYINT},
      </if>
      <if test="record.customerId != null">
        account.customer_id = #{record.customerId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update account account
    set account.id = #{record.id,jdbcType=INTEGER},
      account.account_name = #{record.accountName,jdbcType=VARCHAR},
      account.account_num = #{record.accountNum,jdbcType=VARCHAR},
      account.account_type = #{record.accountType,jdbcType=TINYINT},
      account.account_purpose = #{record.accountPurpose,jdbcType=VARCHAR},
      account.deposit_bank = #{record.depositBank,jdbcType=VARCHAR},
      account.account_state = #{record.accountState,jdbcType=TINYINT},
      account.create_date = #{record.createDate,jdbcType=TIMESTAMP},
      account.update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      account.deleted = #{record.deleted,jdbcType=TINYINT},
      account.customer_id = #{record.customerId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lee.mybatis.model.Account">
    update account
    <set>
      <if test="accountName != null">
        account_name = #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="accountNum != null">
        account_num = #{accountNum,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null">
        account_type = #{accountType,jdbcType=TINYINT},
      </if>
      <if test="accountPurpose != null">
        account_purpose = #{accountPurpose,jdbcType=VARCHAR},
      </if>
      <if test="depositBank != null">
        deposit_bank = #{depositBank,jdbcType=VARCHAR},
      </if>
      <if test="accountState != null">
        account_state = #{accountState,jdbcType=TINYINT},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=TINYINT},
      </if>
      <if test="customerId != null">
        customer_id = #{customerId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lee.mybatis.model.Account">
    update account
    set account_name = #{accountName,jdbcType=VARCHAR},
      account_num = #{accountNum,jdbcType=VARCHAR},
      account_type = #{accountType,jdbcType=TINYINT},
      account_purpose = #{accountPurpose,jdbcType=VARCHAR},
      deposit_bank = #{depositBank,jdbcType=VARCHAR},
      account_state = #{accountState,jdbcType=TINYINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=TINYINT},
      customer_id = #{customerId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>